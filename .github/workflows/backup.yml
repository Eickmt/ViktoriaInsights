name: 🛡️ ViktoriaInsights Datenbank-Backup

# Wann das Backup ausgeführt wird
on:
  schedule:
    # Jeden Tag um 02:00 Uhr (UTC) = 03:00/04:00 deutsche Zeit
    - cron: '0 2 * * *'
  
  # Manuell startbar über GitHub Interface
  workflow_dispatch:
    inputs:
      reason:
        description: 'Grund für manuelles Backup'
        required: false
        default: 'Manuelles Backup'

# Berechtigungen für den Workflow
permissions:
  contents: read
  actions: write

jobs:
  backup:
    name: 📊 Datenbank sichern
    runs-on: ubuntu-latest
    
    steps:
      # 1. Repository Code auschecken
      - name: 📥 Code herunterladen
        uses: actions/checkout@v4
        
      # 2. Python-Umgebung einrichten
      - name: 🐍 Python 3.11 installieren
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      # 3. Abhängigkeiten installieren
      - name: 📦 Python-Pakete installieren
        run: |
          python -m pip install --upgrade pip
          pip install supabase pandas openpyxl
          
      # 4. Backup-Script ausführen
      - name: 🛡️ Datenbank-Backup erstellen
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          echo "🚀 Starte ViktoriaInsights Backup..."
          python backup_script.py
          echo "✅ Backup-Script abgeschlossen"
          
      # 5. Backup-Dateien auflisten (für Debugging)
      - name: 📋 Backup-Dateien auflisten
        run: |
          echo "📁 Erstellte Backup-Dateien:"
          ls -la backup_* 2>/dev/null || echo "⚠️ Keine Backup-Dateien gefunden"
          
      # 6. Backup-Dateien als Artifacts speichern
      - name: 💾 Backup-Dateien speichern
        uses: actions/upload-artifact@v4
        with:
          name: viktoria-backup-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            backup_*.xlsx
            backup_*.md
          retention-days: 30  # 30 Tage aufbewahren
          compression-level: 6
          
      # 7. Backup-Statistiken anzeigen
      - name: 📊 Backup-Statistiken
        run: |
          echo "📈 Backup-Zusammenfassung:"
          echo "🕐 Datum: $(date '+%d.%m.%Y %H:%M:%S')"
          echo "🔢 Run-Nummer: ${{ github.run_number }}"
          echo "📁 Artifact-Name: viktoria-backup-${{ github.run_number }}-${{ github.run_attempt }}"
          
          # Größe der Backup-Dateien
          if ls backup_*.xlsx 1> /dev/null 2>&1; then
            echo "💾 Backup-Größen:"
            du -h backup_*.xlsx
          fi
          
      # 8. Benachrichtigung bei Erfolg
      - name: ✅ Erfolgs-Benachrichtigung
        if: success()
        run: |
          echo "🎉 ViktoriaInsights Backup erfolgreich abgeschlossen!"
          echo "📥 Download: GitHub → Actions → Artifacts"
          
      # 9. Benachrichtigung bei Fehler  
      - name: ❌ Fehler-Benachrichtigung
        if: failure()
        run: |
          echo "💥 ViktoriaInsights Backup fehlgeschlagen!"
          echo "🔍 Logs prüfen für Details"
          
  # Optional: Backup-Historie bereinigen (alte Artifacts löschen)
  cleanup:
    name: 🧹 Alte Backups bereinigen
    runs-on: ubuntu-latest
    needs: backup
    if: always()
    
    steps:
      - name: 📥 Code herunterladen
        uses: actions/checkout@v4
        
      - name: 🧹 Alte Artifacts löschen (älter als 30 Tage)
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            let deletedCount = 0;
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('viktoria-backup-') && 
                  new Date(artifact.created_at) < thirtyDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`🗑️ Gelöscht: ${artifact.name}`);
                  deletedCount++;
                } catch (error) {
                  console.log(`⚠️ Fehler beim Löschen von ${artifact.name}:`, error.message);
                }
              }
            }
            
            console.log(`🧹 ${deletedCount} alte Backup-Artifacts gelöscht`); 